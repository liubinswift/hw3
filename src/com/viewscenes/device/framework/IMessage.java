/* Generated by Together */



package com.viewscenes.device.framework;

import java.io.*;
import java.util.*;

import org.jdom.*;
import org.jdom.input.*;
import org.jdom.output.*;
import com.viewscenes.device.util.*;
import com.viewscenes.util.*;

/**

 * <pre>

 * 消息对象接口，用于在各种需要消息的接口间传递数据

 * 使用MessageElement作为消息的组件，屏蔽了XML解析和结构，消息不一定必须是XML

 * </pre>

 * @version 1.0

 * @see MessageElement

 */

public interface IMessage {

  /**

   * 获得字符串形式的消息，通常情况下是XML字符串

   * @return 字符串形式的消息，通常情况下是XML字符串

   */

  String getMessage();



  /**

   * 获得消息的唯一标识

   * @return 消息的唯一标识

   */

  String getMsgID();



  /**

   * 获得消息的目的地编码，即设备编码

   * @return 消息发往的设备编码

   */

  String getDestCode();

  String getDestUrl();



  /**

   * 获得消息头

   * @return 消息头部信息

   */

  MessageElement getHeader();

 MessageElement getReturnEle();

  /**

   * 获得消息体

   * @return 消息主要信息

   */

  MessageElement getBody();

  public void setBody(MessageElement body);
  public void buildXML();
}

/**

 * 为IMessage提供缺省实现，子类为有限集合，DownMessage和UpMessage

 * @version 1.0

 */

abstract class BaseMessage

    implements IMessage {


  /**

   * 获得字符串形式的消息，通常情况下是XML字符串

   * @return 字符串形式的消息，通常情况下是XML字符串，永不为null

   * @postcondition xml != null

   */

  public String getMessage() {

    if (xml == null) {

      buildXML();

      //assert xml != null;

    }

    return xml;

  }



  /**

   * 获得消息的唯一标识

   * @return 消息的唯一标识，永不为null

   * @postcondition msgID != null

   */

  public String getMsgID() {

    if (this.msgID == null) {

      this.msgID = (String)getHeader().getAttributes().get("MsgID");

      //assert msgID != null;

    }

    return this.msgID;

  }

  public void setBody(MessageElement body){
    this.body = body;
  }


  /**

   * 获得消息的目的地编码，即设备编码

   * @return 消息发往的设备编码，永不为null

   * @postcondition destCode != null

   */

  public String getDestCode() {

    if (this.destCode == null) {

      this.destCode = (String)getHeader().getAttributes().get("DstCode");

    }

    return this.destCode;

  }



  /**

   * 获得消息头

   * @return 消息头部信息，永不为null

   * @postcondition header != null

   */

  public MessageElement getHeader() {

    if (header == null) {

      parseXML();

    }

    return header;

  }



  /**

   * 获得消息体

   * @return 消息主要信息，可能为null

   */

  public MessageElement getBody() {

    if (this.body == null) {

      parseXML();

    }

    return this.body;

  }

  public MessageElement getReturnEle() {

    if (this.returnEle== null) {

      parseXML();

    }

    return this.returnEle;

  }

  protected final void addAttrToElement(Element e, Map attrs) {

    //assert e != null;

    if (attrs == null) {

      return;

    }

    for (Iterator it = attrs.entrySet().iterator(); it.hasNext(); ) {

      Map.Entry o = (Map.Entry)it.next();

      Object value = o.getValue();

      if(value != null){

        e.addAttribute( (String) o.getKey(), (String) value);

      }

    }

  }



  protected final void addChildrenToElement(Element e, Collection children) {

    //assert e != null;

    if (children == null) {

      return;

    }

    for (Iterator it = children.iterator(); it.hasNext(); ) {

      e.addContent(MessageElementToElement( (MessageElement) it.next()));

    }

  }



  protected final Element MessageElementToElement(MessageElement me) {

    //assert me != null;

    Element root = new Element(me.getName());

    addAttrToElement(root, me.getAttributes());

    addChildrenToElement(root, me.getChildren());

    return root;

  }



  protected final MessageElement ElementToMessageElement(Element e) {

    //assert e != null;

    Map eleAttrs = null;

    Collection eleChildren = null;



    List attrs = e.getAttributes();

    if (!attrs.isEmpty()) {

      eleAttrs = new LinkedHashMap(attrs.size());

      for (Iterator it = attrs.iterator(); it.hasNext(); ) {

        Attribute attr = (Attribute) it.next();

        eleAttrs.put(attr.getName(), attr.getValue());

      }

    }



    List children = e.getChildren();

    if (!children.isEmpty()) {

      eleChildren = new ArrayList(children.size());

      for (Iterator it = children.iterator(); it.hasNext(); ) {

        eleChildren.add(ElementToMessageElement( (Element) it.next()));

      }

    }



    return new MessageElement(e.getName(), eleAttrs, eleChildren);

  }



  public void buildXML() {}



  protected void parseXML() {}



  protected String msgID;

  protected String destCode;

  protected String xml;

  protected MessageElement header;

  protected MessageElement body;

  protected MessageElement returnEle;

}



/**

 * 下行消息对象

 * @version 1.0

 * @see MessageElement

 */

final class DownMessage

    extends BaseMessage {
   public String destUrl = "";

   public void setDestUrl(String url){
       this.destUrl = url;
   }

   public String getDestUrl(){
       return destUrl;
   }

  /**

   * 构造下行消息对象

   * @param msgAttributes 根元素属性

   * @param msgBody 消息体

   * @preconditions msgAttributes != null && msgBody != null

   * @postconditions getHeader() != null && getBody() != null

   */

  public DownMessage(Map msgAttributes, MessageElement msgBody) {

    //assert msgAttributes != null && msgBody != null;

    /**

     * @pitfall 如果msgAttributes中已包含MsgID，此处将浪费一个MsgID

     */

    buildMsgID();

    buildHeader(msgAttributes);

    buildBody(msgBody);

  }



  private void buildMsgID() {

    msgID = String.valueOf(MsgUtil.getCurMsgID());

  }



  private void buildHeader(Map attrs) {

    Map headerAttrs = new LinkedHashMap(9);

    addAttrToMap(headerAttrs, attrs, "Version", "4");

    addAttrToMap(headerAttrs, attrs, "MsgID", msgID);

    addAttrToMap(headerAttrs, attrs, "Type", "UnknownType");

    addAttrToMap(headerAttrs, attrs, "DateTime", MsgUtil.getCurDateTime());

    addAttrToMap(headerAttrs, attrs, "SrcCode", MsgUtil.getSrcCode());

    addAttrToMap(headerAttrs, attrs, "DstCode", "UnknownDestCode");

    addAttrToMap(headerAttrs, attrs, "Priority", "11021000");

    //addAttrToMap(headerAttrs, attrs, "UserName", "George");

    //addAttrToMap(headerAttrs, attrs, "PassWord", "HowAreYou");

    this.header = new MessageElement("Msg", headerAttrs, null);

  }


  private void buildBody(MessageElement msgBody) {

    this.body = msgBody;

  }



  public void buildXML() {

    try {

      Element root = MessageElementToElement(this.header);

      root.addContent(MessageElementToElement(this.body));

      this.xml =

          "<?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\"?>\r\n"

          + new XMLOutputter(" ", true, "GB2312").outputString(root);

    } catch (IOException ex) {

      LogTool.fatal("devicelog", ex);

      this.xml = null;

    }

  }

  private void addAttrToMap(Map dest, Map src, String attr,

                            String defaultValue) {

    //assert dest != null && attr != null && src != null && defaultValue != null;

    Object o = src.get(attr);

    dest.put(attr, o != null ? o : defaultValue);

  }

  protected void parseXML() {

    try {

      StringReader read = new StringReader(this.xml);

      SAXBuilder builder = new SAXBuilder(false);

      Element root = builder.build(read).getRootElement();

      Map headerAttrs = null;

      List attrs = root.getAttributes();

      if (!attrs.isEmpty()) {

        headerAttrs = new LinkedHashMap(attrs.size());

        for (Iterator it = attrs.iterator(); it.hasNext(); ) {

          Attribute attr = (Attribute) it.next();

          headerAttrs.put(attr.getName(), attr.getValue());

        }

      }

      this.header = new MessageElement(root.getName(), headerAttrs, null);

      List children = root.getChildren();

      Element re = root.getChild("Return");

      if (re == null) {

        //主动上报

        this.returnEle = null;

        this.body = ElementToMessageElement( (Element) children.get(0));

      } else {

        //查询返回

        this.returnEle = ElementToMessageElement(re);

        this.body = children.size() < 2 ? null :

            ElementToMessageElement( (Element) children.get(1));

      }

    } catch (JDOMException ex) {

      LogTool.fatal("devicelog", ex);

    }

  }


}



/**

 * 上行消息对象

 * @version 1.0

 * @see MessageElement

 */

final class UpMessage

    extends BaseMessage {

public String destUrl = "";

public void setDestUrl(String url){
    this.destUrl = url;
}

public String getDestUrl(){
    return destUrl;
   }

  /**

   * 构造上行消息对象

   * @param xmlMsg 从设备或其他来源获得的消息

   * @preconditions xmlMsg != null && xmlMsg is well-formed

   * @postconditions getHeader() != null && getBody() != null && getMessage() != null

   */

  public UpMessage(String xmlMsg) {

    //assert xmlMsg != null;

    this.xml = xmlMsg;

  }



  /**

   * 构造上行消息对象

   * @param msg 包含完整信息的MessageElement

   * @preconditions msg != null

   */

  public UpMessage(MessageElement msg) {

    //assert msg != null;

    try {

      this.xml =

          "<?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\"?>\r\n"

          + new XMLOutputter(" ", true, "GB2312").outputString(

          MessageElementToElement(msg));

    } catch (IOException ex) {

      LogTool.fatal("devicelog", ex);

      this.xml = null;

    }

  }



  /**

   * 返回该消息对应的Return元素的信息

   * @return Return元素信息

   */

  public MessageElement getReturnEle() {

    if (returnEle == null) {

      parseXML();

    }

    return returnEle;

  }



  /**

   * 返回该消息对应的下行消息的msgID

   * @return 该消息对应的下行消息的msgID，永不为空

   * @postconditions replyID != null

   */

  public String getReplyID() {

    if (this.replyID == null) {

      this.replyID = (String)getHeader().getAttributes().get("ReplyID");
      if (replyID==null) replyID = "";
      if (this.replyID.equalsIgnoreCase("")){
        this.replyID = "-1";
      }
    }
   else if (this.replyID.equalsIgnoreCase("")){
     this.replyID = "-1";
   }

    return this.replyID;
  }

  protected void parseXML() {

    try {

      StringReader read = new StringReader(this.xml);

      SAXBuilder builder = new SAXBuilder(false);

      Element root = builder.build(read).getRootElement();

      Map headerAttrs = null;

      List attrs = root.getAttributes();

      if (!attrs.isEmpty()) {

        headerAttrs = new LinkedHashMap(attrs.size());

        for (Iterator it = attrs.iterator(); it.hasNext(); ) {

          Attribute attr = (Attribute) it.next();

          headerAttrs.put(attr.getName(), attr.getValue());

        }

      }

      this.header = new MessageElement(root.getName(), headerAttrs, null);



      List children = root.getChildren();

      //assert children.size() <= 2;

      Element re = root.getChild("Return");

      if (re == null) {

        //主动上报

        this.returnEle = null;

        this.body = ElementToMessageElement( (Element) children.get(0));

      } else {

        //查询返回

        this.returnEle = ElementToMessageElement(re);

        this.body = children.size() < 2 ? null :

            ElementToMessageElement( (Element) children.get(1));

      }

    } catch (JDOMException ex) {

      LogTool.fatal("devicelog", ex);

    }

  }

  public void buildXML() {

    try {

      Element root = MessageElementToElement(this.header);

      root.addContent(MessageElementToElement(this.returnEle));
      if (this.body!=null)
        root.addContent(MessageElementToElement(this.body));

      this.xml =

          "<?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\"?>\r\n"

          + new XMLOutputter(" ", true, "GB2312").outputString(root);

    } catch (IOException ex) {

      LogTool.fatal("devicelog", ex);

      this.xml = null;

    }

  }



  private String replyID;

  private MessageElement returnEle;

}

