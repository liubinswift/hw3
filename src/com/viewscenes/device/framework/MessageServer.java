/* Generated by Together */



package com.viewscenes.device.framework;



import com.viewscenes.device.exception.*;
import com.viewscenes.util.*;
import org.jdom.*;
import org.jdom.output.*;


/**

 * 接收设备消息的控制器，类似于发送消息的控制器MessageClient
 * @version 1.0
 * @see MessageClient

 */

public class MessageServer {

  static int MAX_MSG = 50000;
  public static ObjectQueue msgQueue = null;
  public static MessageRegister register = new MessageRegister();

  static int MAX_PROCESSOR = 3;
  static MessageProcessThread[] processors = null;

  static{

    loadConfig();
    msgQueue = new ObjectQueue("设备消息",MAX_MSG,MAX_MSG/2);
    processors = new MessageProcessThread[MAX_PROCESSOR];
    for (int i=0;i<MAX_PROCESSOR;i++){
      processors[i] = new MessageProcessThread();
      processors[i].setPriority(Thread.NORM_PRIORITY-1);
      processors[i].mr = register;
      processors[i].start();
    }
  }

  public static void loadConfig(){

    String configFilePath = XMLConfigFile.getConfigFilePath("appserver.xml");
    Element root = null;
    try {
      root = FileTool.loadXMLFile(configFilePath);
    }
    catch (UtilException ex) {
      LogTool.warning(ex);
    }

    Element upmessage = root.getChild("device_message_processor");
    if (upmessage!=null){
       String processor = upmessage.getAttributeValue("max_processor");
      try {
        MAX_PROCESSOR = Integer.parseInt(processor);
      }
      catch (NumberFormatException ex1) {
      }

      String msg = upmessage.getAttributeValue("max_msg");
     try {
       MAX_MSG = Integer.parseInt(msg);
     }
     catch (NumberFormatException ex1) {
     }

    }

  }


  public static void setMsg2Queue(String msg){
    msgQueue.add(msg);
  }

  private MessageServer(){}
}
