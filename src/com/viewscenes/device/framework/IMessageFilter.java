/* Generated by Together */



package com.viewscenes.device.framework;



import java.util.*;

import org.jdom.*;

import com.viewscenes.device.util.*;

import com.viewscenes.device.exception.*;

import com.viewscenes.util.LogTool;



/**

 * 消息过滤接口，如果需要，可通过配置文件动态拔插

 * @see FilterManager

 */

interface IMessageFilter {

  /**

   * 用于在对消息处理前进行各种验证，具体验证由实现者实现，由过滤管理器管理过滤过程

   * @param msg 过滤前的消息

   * @return 过滤后的消息

   * @preconditions msg != null

   * @throws DeviceFilterException 当输入的消息无法通过过滤时抛出异常

   */

  IMessage filter(IMessage msg) throws DeviceFilterException;

}



/**

 * 将元素名与属性名转化为小写的Filter，专用于UpMessage

 * @version 1.0

 */

class MsgCaseFilter

    implements IMessageFilter {

  public IMessage filter(IMessage msg) throws DeviceFilterException {


    UpMessage um = (UpMessage) msg;

    MessageElement body = um.getBody();

    if (body == null) {

      return msg;

    }

    Collection children = new ArrayList();

    MessageElement ret = um.getReturnEle();

    if(ret != null){

      children.add(ret);

    }

    children.add(toLowerCase(body));

    MessageElement header = um.getHeader();

    return new UpMessage(new MessageElement(header.getName(),

                                            header.getAttributes(),

                                            children));

  }



  private final MessageElement toLowerCase(MessageElement me) {

    //assert me != null;

    Map oldAttrs = null, newAttrs = null;

    Collection oldChildren = null, newChildren = null;

    if ( (oldAttrs = me.getAttributes()) != null) {

      newAttrs = new LinkedHashMap(oldAttrs.size());

      for (Iterator it = oldAttrs.keySet().iterator(); it.hasNext(); ) {

        Object key = it.next();

        newAttrs.put(key.toString().toLowerCase(), oldAttrs.get(key));

      }

    }

    if ( (oldChildren = me.getChildren()) != null) {

      newChildren = new ArrayList(oldChildren.size());

      for (Iterator it = oldChildren.iterator(); it.hasNext(); ) {

        newChildren.add(toLowerCase((MessageElement) it.next()));

      }

    }

    return new MessageElement(me.getName().toLowerCase(), newAttrs, newChildren);

  }

}



/**

 * <pre>

 * 管理各种消息过滤器，该类和消息处理者管理器具有类似的行为，可使用模板实现，

 * 用继承则显得笨重，且会充斥着down cast，作罢

 * </pre>

 * @see IMessageFilter

 * @see ProcessorManager

 */

class FilterManager {

  private Collection filters;

  public FilterManager(String name) {

    filters = new ArrayList();

    Element filtermanager = MsgUtil.getConfigItem("filtermanager");
    if (filtermanager==null){
      LogTool.debug("devicelog","在配置文件中找不到filtermanager结点");
      return;
    }

    Element manager = filtermanager.getChild(name);

    if (manager==null){
      LogTool.debug("devicelog","在配置文件的中找不到消息过滤器"+name+"的配置");
      return;
    }
    List children = manager.getChildren();

      for (Iterator it = children.iterator(); it.hasNext(); ) {

        Element child = (Element) it.next();

        try {
          addFilter( (IMessageFilter) Class.forName(child.getAttributeValue(
              "class")).newInstance());
        }
        catch (Exception ex) {
          LogTool.debug(ex);
        }

      }// end for
  }


  /**

   * 增加过滤器，使用配置文件和Reflection机制，可以运行时增加删除替换过滤器

   * @param filter 新增加的过滤器

   * @preconditions filter != null

   */

  public synchronized void addFilter(IMessageFilter filter) {

    filters.add(filter);

  }



  /**

   * 遍历内部保存的过滤器实例，依次调用其filter方法，前一个的输出作为后一个的输入

   * @param msg 过滤前的消息

   * @return 过滤后的消息，不会为空

   * @preconditions msg != null

   * @postconditions 返回值 != null

   * @throws DeviceFilterException 当输入的消息无法通过过滤时抛出异常

   */

  public IMessage doFilter(IMessage msg) throws

      DeviceFilterException {

    IMessage msgIt = msg;

    for (Iterator it = filters.iterator(); it.hasNext(); ) {

      msgIt = ( (IMessageFilter) it.next()).filter(msgIt);

    }

    return msgIt;

  }





}
