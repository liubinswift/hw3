/* Generated by Together */



package com.viewscenes.device.framework;



import java.util.*;

import org.jdom.*;

import com.viewscenes.device.thirdparty.*;

import com.viewscenes.device.exception.*;

import com.viewscenes.device.util.*;

import com.viewscenes.util.*;

import com.viewscenes.util.LogTool;



/**

 * 消息处理接口，如果需要，可通过配置文件动态拔插

 * @see ProcessorManager

 */

interface IMessageProcess {

  /**

   * 对消息进行各种处理，具体处理由实现者实现，由处理管理器管理处理过程

   * @param msg 待处理的消息

   * @preconditions msg != null

   * @throws DeviceProcessException 当输入的消息处理失败时抛出异常

   */

  public boolean process(IMessage msg) throws DeviceProcessException;

}



/**

 * 对消息进行数据库处理的处理者

 */

class MsgDBProcessor

    implements IMessageProcess {

  /**

   * 将消息入库

   * @param msg 待处理的消息

   * @preconditions msg != null

   * @throws DeviceProcessException 当输入的消息处理失败时抛出异常

   */

  public boolean process(IMessage msg) throws DeviceProcessException {
    return true;
  }

}



/**

 * 对消息进行设备处理（发送到设备）的处理者

 */

class MsgDeviceProcessor

    implements IMessageProcess {

  /**

   * 将消息发送到设备

   * @param msg 待处理的消息

   * @preconditions msg != null

   * @throws DeviceProcessException 当输入的消息处理失败时抛出异常

   */

  public boolean process(IMessage msg) throws DeviceProcessException {
    new PostHttpThread(InnerDevice.instance(msg.getDestCode()).getURL(),

                       msg.getMessage());
    return true;

  }

}



/**

 * 对消息进行日志处理（写到硬盘文件等）的处理者

 */

class MsgLogProcessor

    implements IMessageProcess {

  /**

   * 将消息记录到文件

   * @param msg 待处理的消息

   * @preconditions msg != null

   * @throws DeviceProcessException 当输入的消息处理失败时抛出异常

   */

  public boolean process(IMessage msg) throws DeviceProcessException {

    LogTool.info("devicelog", msg.getMessage());
    return true;

  }

}



/**

 * 对消息进行转发处理的处理者

 */

class MsgFwProcessor

    implements IMessageProcess {

  /**

   * 将消息进行转发

   * @param msg 待处理的消息

   * @preconditions msg != null

   * @throws DeviceProcessException 当输入的消息处理失败时抛出异常

   */

  public boolean process(IMessage msg) throws DeviceProcessException {

    String dstCode = ((UpMessage)msg).getDestCode();

    if( !MsgUtil.getSrcCode().equals(dstCode)){

      new PostHttpThread(MsgUtil.getFwURL(dstCode), msg.getMessage());
      return false;
    }
    return true;
  }

}


/**

 * 对消息进行转发处理的处理者

 */

class MsgServerUpProcessor

    implements IMessageProcess {

  /**
   * 将消息进行转发
   * @param msg 待处理的消息
   * @preconditions msg != null
   * @throws DeviceProcessException 当输入的消息处理失败时抛出异常
   */

  public boolean process(IMessage msg) throws DeviceProcessException {

    String replyID = ((UpMessage)msg).getReplyID();
    if (replyID==null)
      return false;
    if (replyID.equals("-1")){
      return true;
    }
    String msgCode = replyID.substring(0,2);
    String url = null;
    try {
      url = com.viewscenes.sys.SystemSynchronizer.getUrl(msgCode);
    }
    catch (Exception ex) {
      LogTool.debug(ex);
    }
    if (url != null){
        LogTool.debug("Foward message to:"+url);
        new PostHttpThread(url, msg.getMessage());
        return false;
    }
    return true;
  }
}



/**

 * <pre>

 * 管理各种消息处理器

 * 该类和消息过滤者管理器具有类似的行为，可使用模板实现，

 * 用继承则显得笨重，且会充斥着down cast，作罢

 * </pre>

 * @see IMessageProcess

 * @see FilterManager

 */

class ProcessorManager {

  private Collection processors;

  public ProcessorManager(String name) {

    processors = new ArrayList();

    Element processormanager = MsgUtil.getConfigItem("processormanager");
    if (processormanager==null){
      LogTool.debug("devicelog","在配置文件中找不到processormanager结点");
      return;
    }

    Element manager = processormanager.getChild(name);
    if (manager==null){
      LogTool.debug("devicelog","在配置文件的中找不到消息处理器"+name+"的配置");
      return;
    }

    List children = manager.getChildren();

    for (Iterator it = children.iterator(); it.hasNext(); ) {

        Element child = (Element) it.next();

        try {
          addProcessor( (IMessageProcess) Class.forName(child.
              getAttributeValue("class")).newInstance());
        }
        catch (Exception ex) {
          LogTool.warning("devicelog",ex);
        }
      }

  }



  /**

   * 增加处理器，使用配置文件和Reflection机制，可以运行时增加删除替换处理器

   * @param processor 新增加的处理器

   * @preconditions processor != null

   */

  public synchronized void addProcessor(IMessageProcess processor) {

    //assert processor != null;

    processors.add(processor);

  }



  /**

   * 遍历内部保存的处理器实例，依次调用其process方法

   * @param msg 待处理的消息

   * @preconditions msg != null

   * @throws DeviceProcessException 当输入的消息处理失败时抛出异常

   */

  public boolean doProcess(IMessage msg) throws

      DeviceProcessException {

    for (Iterator it = processors.iterator(); it.hasNext(); ) {

      if (!( (IMessageProcess) it.next()).process(msg))
        return false;
    }
    return true;

  }


}
